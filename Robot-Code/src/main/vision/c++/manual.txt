
-------------------------------------------------------------

FRC team 3695 vision manual

-------------------------------------------------------------

This file goes over how to work with the code and what certain parts of it are and do. 
NOTE: All vision code in this folder is written in C++, and assumes that the image captured from the video stream is already preprocessed.

contents:
I.   The Settings
II.  Compiling the code


---------------
I. The Settings
---------------

All settings for the program are located in "Settings.h".

 - DEBUG              : Option to run the program in debugging mode. In this mode, postprocessed image is displayed and a GUI is provided.
 - USE_IMAGE          : Option to use image included in folder (target_3.jpg). This is for developing outside of the room.
 - DOCK_USING_CLOSEST_TO_CENTER : When true sends the closest target to the calculated center of the robot, otherwise uses the biggest target.

 - CAMERA_RESOLUTION_X: The camera resolution width. This must match that of the JeVois configuration, or we will not get the right image.
 - CAMERA_RESOLUTION_Y: The camera resolution height. This also must match the resolution height of the JeVois camera.

 - CAMERA_OFFSET_X    : The horizontal offset of the camera from the center of the robot (inches)
 - CAMERA_OFFSET_Y    : The vertical offset of the camera from the center of the robot (inches)
 - CAMERA_OFFSET_RIGHRECT_X : The horizontal offset of the right rectangle of the target from the robot center (inches)

 - KNOWN_HEIGHT       : The height of ONE of the rectangular pieces of the target in inches. In our case the height is 5.5 inches tall. This should not change.
 - FOCAL_HEIGHT       : The percieved focal height of the target from 24 inches. You should get this value from the calibrator.
 - DIST_BETWEEN_RECTS : The horizontal distance in inches between the two rects of the target (inches)
 - CALIBRATED_DISTANCE: The distance from the target that the settings were calibrated at. usually somewhere between 18-24 inches
 - ERROR_CORRECTION   : The correction factor for the found distances.

 - ASPECT_RATIO       : The aspect ratio of ONE side of the target. For the DeepSpace challenge, it is somewhere around .3 (2in / 5.5in)
 - ASPECT_RATIO_ERROR : The amount of deviation from the aspect ratio that is allowed for a contour to pass
                    
 - MIN_AREA               : The minimum area a contour must have to be considered for pairing (pixels). This is mainly to root out noise.
 - SINGLE_CONTOUR_MIN_AREA: The minimum area that a contour must have for it to be considered for signle targeting. also to root out noise.

 - LEFT_ANGLE         : The angle of the leftmost contour of the target. Probably will be negative (thanks opencv!). Use Calibrate.py in the python folder to get the best angle
 - RIGHT_ANGLE        : The angle of the righmost contour of the target. Again, just use the calibration program in the python folder.
 - ANGLE_ERROR        : The amount of deviation from the angle that is allowed for a contour to pass.

 - RIGHT_ANGLE_ONLY_DAMPER : value used to damp the right contour angle to robot, so robot doesn't yeet itself into the right target.

 - DISTANCE           : The distance in inches between the centers of the target.
 - DISTANCE_ERROR     : The amount of deviation the distance between the contours can be.

 - MULTIPLE_CONTOUR_IGNORE_THRESHOLD : used to make shuttle docking a bit more reliable. when multiple single rects are seen, all targets with an x coordinate greater than this value will be ignored.
 - MULTIPLE_CONTOUR_TARGET_LOCK      : distance from the target in inches that the program will lock up on. Program locks up when within this distance.
 - CONSECUTIVE_FRAME_UNLOCK          : amount of consecutive frames that must have valid targets for the program to unlock.

-------------
II. Compiling
-------------

To compile the code, use the below command. Make sure you are in the vision/c++ directory. gcc can also be used in place of g++.
make Vision
run with: ./Vision

To compile the calibration program, change into the vision/c++/calibration directory and use below command. 
make Calibrate
run program with: ./Calibrate